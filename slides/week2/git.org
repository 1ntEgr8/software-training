#+TITLE: GitHub Training Two 2017
#+AUTHOR: Sahit Chintalapudi, Josh Ting 
#+EMAIL: schintalapudi@gatech.edu, josh.ting@gatech.edu

* Let's Recap
- We have a fork of the software training repo on our local GitHub account
- Reminder: a fork is an independently maintained repository based off of another
- The original repository is referred to as "upstream"

* Things have changed upstream, what do we do?
- We need a series of git commands that can update our fork and local repo with the new content in the upstream repo
- All terminal git commands are in the form:
  #+BEGIN_SRC shell
    git <command> <param1> <param2> ...
  #+END_SRC

* Git pull
- First, navigate to the git repo from the terminal
- We can keep our fork up to date with the /git pull/ command

  #+BEGIN_SRC shell
    cd software-training    # or wherever your repo is
    git pull upstream master
  #+END_SRC

- What does this mean?
      - /git pull/: pull from one GitHub repository into our current repository
      - /upstream/: specify that we are pulling from the upstream repository
      - /master/: pull into the "master" branch of our current repository
- What are branches? That's classified! Stay tuned for next lesson
# Basically say that this is outside the scope of the current lesson and if they want to read up on it on their own we won't stop them

* Let's make some of our own changes!
- Open up a text editor of your choice and create a new file with some text
  in it
- Save the file inside the repository
- Now how do we make this file show up online for others to see?

* Time to make them official:
- Git encapsulates changes in "commits"
- In order to commit something, you must specify which changes you've made to the codebase should be in the commit
- This is called "staging" your changes

* Git add

  #+BEGIN_SRC shell
    git add .
  #+END_SRC

- The add command tells git to keep track of new files added in the directory
- git add takes in parameters for each file or directory to stage
  - The period means all files in this directory and its subdirectories

* Git commit

  #+BEGIN_SRC shell
    git commit -m "Added a file!"
  #+END_SRC

- /commit/: Commit currently staged changes to git
  - This is making the change "permanent" (more on this later)
- /-m "..."/: Commits require commit messages to label them
  - This is an easy way to specify that message while creating the commit

* Git push

  #+BEGIN_SRC shell
    git push origin master
  #+END_SRC

- /git push/: Command to push commits to another repository
- /origin/: Name of the repo to push to (origin is referring to our fork)
- /master/: Name of the branch to push to(Still top secret material)

* Some notes about commits 
[[file:https://imgs.xkcd.com/comics/git_commit.png]]
- A good commit message is short but clearly explains what changes were made
      - A good commit message makes it easy to see what changes could lead to
        your project not behaving properly
- Anything  commited to git stays in git. 
      - This doesn't mean bad commits can't be reverted
      - This does mean that you should never commit things like passwords to
        git

# * Good vs bad:
# | Good commit message | Bad commit message |
# |---------------------+--------------------|
# | [[file:http://i.imgur.com/k0Llu0s.png]] | [[file:http://i.imgur.com/8vCOZQP.png]] |
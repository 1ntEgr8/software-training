#+TITLE: Intro to Programming
#+AUTHOR: Jason Gibson
#+EMAIL: jgibson37@gateche.edu

* What are we doing today?
- Instructor introductions
- What is programming
- Hello World!
- Variables
- Control Flow
- Conditionals

* Meet Jason
#+ATTR_HTML: :width 15%
[[file:https://i.imgur.com/izC5WWA.jpg]]
- Jason Gibson
  - Junior, Computer Science (Threads: Devices, Intelligence)
  - Inside RoboJackets: Training Chair, IGVC Software Lead
  - Outside RoboJackets: Avid lover of dad jokes
  - Master of cringe worthy pictures
- How to contact me
  - Slack: [[https://robojackets.slack.com/messages/@jasongibson/][@jasongibson]]
  - Email: [[mailto:jgibson37@gatech.edu][jgibson37@gatech.edu]]

* What Programming Is
#+BEGIN_NOTES
Talk for a minute or two about everything programming can do
#+END_NOTES

* What Programming Is Not
#+BEGIN_NOTES
This is meant to emphasize that they will not become a God programmer overnight
and to dispell the misconception that they are going to be coding amazing things
immediately.
#+END_NOTES
- Impossible
- Easy

* Programming Failures
#+BEGIN_NOTES
Talk for a minute or two about everything programming can do
Orbiter was pounds instead of newtons
Robocup forgot the flip the direction on the field and tried (unsuccessfully) to score on themselves
Jason tried to delete a local directory usr and did sudo rm -rf /usr on a production server
Ariane software testing did not acccount for increased speed and tried to store a number
    that was not 16 bits in 1 bits and ended up in an explosion
#+END_NOTES
- Mars Climate Orbiter (1998)
    - the code returned the wrong units causing a 655 million dollar explosion on Mars
- RoboCup field disaster
- deleting the /bin directory on a production server
- Ariane s5 flight 501
    - faster speed resulted in a 64 bit number being stored as 16 bits ~500 million failure

* Codepad
- Today we will be using codepad to write code in
  - This is a remote interview tool
- go to [[https://codepad.remoteinterview.io]]

* Change to C++ The superior language
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/IeHxwAM.png]]

* Change to C++ The superior language
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/S1PecNy.png]]

* Hello World!
- Add *World!* to your code
#+BEGIN_SRC C++ -n :exports both :includes <iostream> :defines cout std::cout
  #include <iostream>
  using namespace std;

  int main() {
    cout << "Hello World!";
    return 0;
  }
#+END_SRC

* Click Run
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/caYg2AY.png]]

* {}
- Curly Braces define scope of a function in the code
- Right now that means that your code goes in the main function
#+BEGIN_SRC C++ -n
  int main() {
    // <==== HERE =====
  }
#+END_SRC

* ;
#+BEGIN_NOTES
Run this code to show them that the compiler shows an error on a different line
than it is actually on.
#+END_NOTES
- A semicolon defines the end of a line of code
- Think of it like a period in a sentence
- All statements
    - A missing semicolon results in an error message that can point to the wrong line
- TODO explain what lines have semicolons and what lines do not
#+BEGIN_SRC C++ -n
    #include <iostream>
    using namespace std;
    int main() {
      cout << "Hello"
      cout << "World!";
      return 0;
    }
#+END_SRC
- Output
#+BEGIN_EXAMPLE
/temp/file.cpp: In function ‘int main()’:
/temp/file.cpp:5:5: error: expected ‘;’ before ‘cout’
     cout << "World!";
     ^

Compilation Failed
#+END_EXAMPLE

* Looking back at Hello World!
- our code is in {}
- *cout* tells the computer to write the letters to the screen
- *<<* tells the computer what to write out
- line 1: inclues a header file (covered later)
- line 4: defines the main function
- line 6: tells the computer that the program ran successfully
#+BEGIN_SRC C++ -n :exports both :includes <iostream> :defines cout std::cout
  #include <iostream>
  using namespace std;

  int main() {
    cout << "Hello World!";
    return 0;
  }
#+END_SRC

* Most useful program ever
#+BEGIN_NOTES
This should naturally lead into why variables are useful. Without them
all programs would be deterministic.
#+END_NOTES
#+BEGIN_SRC C++ -n :exports both :includes <iostream> :defines cout std::cout
  int main() {
    cout << 2 + 2;
    return 0;
  }
#+END_SRC

* Variables
- Alias for a value
- the value can be changed without changing the alias

* Primitive Variables Types
| Name | Description |
|-------+------|
| =bool= | Can be either *true* or *false*|
| =char= | a character like 'c' or '+'|
| =int= | A whole number *bounded|
| =double= | a decimal number *bounded|
- What makes a variable primitive?

* Primitive Variables?
[[file:https://i.imgur.com/Wo0ovX5.jpg]]
- But Actually... It means that it cannot be divided into smaller parts
- A number is just a number

* Important Symbols
#+BEGIN_NOTES
No lengthy explanation of << and stdout
#+END_NOTES
| symbol | meaning |
|-------+------|
| =//= | Signifies a comment, The computer will not try to compile that line |
| === | assignment operator, value of right is assigned to variable on left |
| =<<= | sends something to the OS which displays it in the terminal |

* Math Operators
- order of operations still applies
- ~()~ > ~*,/~ > ~+,-~
| symbol | meaning |
|-------+------|
| =()= | =groups a statement= |
| =*= | =multiplies two numbers= |
| =/= | =divides a number by another= |
| =+= | =adds two numbers together= |
| =-= | =subtracts two numbers= |

* Variable Syntax
| =type= | =name= | === | =value= | ; |
|-------+------|
| =bool= | =var= | = | true | ; |
| =char= | =character= | = | 'c' | ; |
| =int= | =intVar= | = | 2 | ; |
| =double= | =double_var= | = | 2.2647 | ; |

* Variables
- =my_var= now represents the value 2
#+BEGIN_SRC C++ -n :exports both :includes <iostream> :defines cout std::cout
  int main() {
    int my_var = 2;
    cout << my_var + my_var;
    return 0;
  }
#+END_SRC

* Declaration vs Definition
- int num = 1;
    - creates the variable num of type int and assigns it the value 1
- num = 4;
    - the type is already known from above so this line just assigns it the value 4

* Variables
- Variables can have their assigned value changed on the fly
#+BEGIN_SRC C++ -n :exports both :includes <iostream> :defines cout std::cout
  int main() {
    int my_var = 2;
    cout << my_var + my_var;
    my_var = 4;
    cout << my_var + my_var;
    return 0;
  }
#+END_SRC

* Questions??
#+BEGIN_NOTES
Write a couple examples of setting up a primitive already described and then
changing it using only the operators above. like printing numbers 1 - 10 using a var.
DO NOT use strings, ++, --, or anything else not covered already
#+END_NOTES
- Still more to come...
- Let's write some code

* If Statements
- What *IF* I only want to execute code sometimes?

* If Statement Syntax
#+BEGIN_SRC C++ -n
  int main() {
    if (true) {
        // <==== This executes =====
    }
    if (false) {
        // <==== This does *NOT* execute =====
    }
  }
#+END_SRC

* Equivalence operators
| symbol | True Condition | example true | example false
|-------+------|------+------|
| =!= | opposite of current value| !true | !false
| ==== | "equal"| 2 == 2 | 4 == 2
| =!== | *NOT* "equal"| 2 != 4 | 2 != 2
| =>= | the number of the left is larger and not equal to the right| 4 > 2 | 2 > 4
| =<= | the number of the left is smaller and not equal to the right| 2 < 4 | 4 < 2

* If else syntax
#+BEGIN_SRC C++ -n
  int main() {
    if (true) {
        // <==== This executes =====
    } else {
        // <==== This does *NOT* execute =====
    }
    if (false) {
        // <==== This does *NOT* execute =====
    } else {
        // <==== This executes =====
    }
  }
#+END_SRC

* Conditional Practice 1 Question
#+BEGIN_NOTES
1
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 == 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Conditional Practice 2 Question
#+BEGIN_NOTES
2
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 != 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Conditional Practice 3 Question
#+BEGIN_NOTES
2
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 < 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Chaining Conditionals
#+BEGIN_NOTES
Talk about how this is difficult to write at deeper levels
Think 5-6 Conditionals
#+END_NOTES
#+BEGIN_SRC C++ -n
  int main() {
    if (true) {
        // <==== This executes =====
        if (true) {
            // <==== This executes =====
        }
        // <==== This executes =====
    }
    // <==== This executes =====
  }
#+END_SRC

* Logical Operators *AND*
- *&&*
| a | b | a AND b|
|-------+------|------+------|
| True | True | True |
| True | False | False |
| False | True | False |
| False | False | False |

* Logical Operators *OR*
- *||*
| a | b | a OR b|
|-------+------|------+------|
| True | True | True |
| True | False | True |
| False | True | True |
| False | False | False |

* Logical Operators order
- statements will be evaluated from left to right
- no limit to the number you can have
- Statements can be grouped using *()*
    - Just like with math operators *()* are executed first
    - 1 && (2 || 3)
        - 2 || 3 is done first and the result in anded with 1

* Conditional Practice 4 Question
#+BEGIN_NOTES
2
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 < 2 && 2 == 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Conditional Practice 4 Question
#+BEGIN_NOTES
1
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 != 2 || 2 == 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Loops!
- What If I want to do something multiple times

* While Loops Syntax
#+BEGIN_SRC C++ -n
while (condition == true) {
    // do something
}
#+END_SRC

* For Loop Syntax
#+BEGIN_SRC C++ -n
for (initializer; condition; change condition) {
    // do something
}
#+END_SRC

* Math Operators Continued
| syntax | meaning | equivalent |
|-------+------|------+------|
| =var++;= | =increments the variable= | var = var + 1; |
| =var--;= | =decrements the variable= | var = var - 1; |

* Equivalent while and for Loop
#+BEGIN_SRC C++ -n
int while_counter = 10;
while (while_counter > 0) {
    // do something
    while_counter = while_counter - 1;
}
for (int for_counter = 10; for_counter > 0; for_counter++) {
    // do something
}
#+END_SRC

* Questions??
- A go-to place to ask questions ([[https://piazza.com/gatech/fall2017/rjsw/home][Piazza!]])
- Monitored by highly experienced RoboJackets software members

* Let's write some code
#+BEGIN_NOTES
Write a couple examples of code using what has already been covered.
#+END_NOTES

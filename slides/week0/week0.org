#+TITLE: Intro to Programming
#+AUTHOR: Jason Gibson
#+EMAIL: jgibson37@gateche.edu

* What are we doing today?
- Instructor introductions
- What is programming
- Hello World!
- Variables
- Control Flow
- Conditionals

* Meet Jason
#+ATTR_HTML: :width 15%
[[file:https://i.imgur.com/izC5WWA.jpg]]
- Jason Gibson
  - Junior, Computer Science (Threads: Devices, Intelligence)
  - Inside RoboJackets: Training Chair, IGVC Software Lead
  - Outside RoboJackets: Avid lover of dad jokes
  - Master of cringe worthy pictures
- How to contact me
  - Slack: [[https://robojackets.slack.com/messages/@jasongibson/][@jasongibson]]
  - Email: [[mailto:jgibson37@gatech.edu][jgibson37@gatech.edu]]

* What Programming Is
#+BEGIN_NOTES
Talk for a minute or two about everything programming can do
#+END_NOTES

* What Programming Is Not
#+BEGIN_NOTES
This is meant to emphasize that they will not become a God programmer overnight
and to dispell the misconception that they are going to be coding amazing things
immediately.
#+END_NOTES
- Impossible
- Easy

* Codepad
- Today we will be using codepad to write code in
  - This is a remote interview tool
- go to [[https://codepad.remoteinterview.io]]

* Change to C++ The superior language
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/IeHxwAM.png]]

* Change to C++ The superior language
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/S1PecNy.png]]

* Hello World!
- Add *World!* to your code
#+BEGIN_SRC C++ -n
  #include <iostream>
  using namespace std;

  int main() {
    cout << "Hello World!";
    return 0;
  }
#+END_SRC

* Click Run
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/caYg2AY.png]]

* {}
- Curly Braces define scope of a function in the code
- Right now that means that your code goes in the main function
#+BEGIN_SRC C++ -n
  int main() {
    // <==== HERE =====
  }
#+END_SRC

* ;
#+BEGIN_NOTES
Run this code to show them that the compiler shows an error on a different line
than it is actually on.
#include <iostream>
using namespace std;
int main() {
    cout <<"Hello "
    cout << "World!";
    return 0;
}
#+END_NOTES
- A semicolon defines the end of a line of code
- Think of it like a period in a sentence
- Almost every line of code will end with a semicolon
    - A missing semicolon results in an error message that can point to the wrong line
#+BEGIN_SRC C++ -n
  int main() {
    doSomething;
  }
#+END_SRC

* Looking back at Hello World!
- our code is in {}
- *cout* tells the computer to write the letters to the screen
- *<<* tells the computer what to write out
- line 1: inclues a header file (covered later)
- line 4: defines the main function
- line 6: tells the computer that the program ran successfully
#+BEGIN_SRC C++ -n
  #include <iostream>
  using namespace std;

  int main() {
    cout << "Hello World!";
    return 0;
  }
#+END_SRC

* Most useful program ever
#+BEGIN_NOTES
This should naturally lead into why variables are useful. Without them
all programs would be deterministic.
#+END_NOTES
#+BEGIN_SRC C++ -n
  int main() {
    cout << 2 + 2;
    return 0;
  }
#+END_SRC

* Variables
- Alias for a value
- the value can be changed without changing the alias

* Primitive Variables Types
| Name | Description |
|-------+------|
| =bool= | Can be either *true* or *false*|
| =char= | A number from -128 to 127 or a character like 'c' or '+'|
| =int= | Any whole number from -2,147,483,648	2,147,483,647|
| =double= | any number from 2.2e-308 to 1.8e+308 with decimals|
- What makes a variable primitive?

* Primitive Variables?
[[file:https://i.imgur.com/Wo0ovX5.jpg]]
- But Actually... It means that it cannot be divided into smaller parts
- A number is just a number

* Important Symbols
#+BEGIN_NOTES
No lengthy explanation of << and stdout
#+END_NOTES
| symbol | meaning |
|-------+------|
| =//= | Signifies a comment, The computer will not try to compile that line |
| === | assignment operator, value of right is assigned to variable on left |
| =<<= | sends something to the OS which displays it in the terminal |

* Math Operators
- order of operations still applies
- () > *,/ > +,-
| symbol | meaning |
|-------+------|
| =()= | =groups a statement= |
| =*= | =multiplies two numbers= |
| =/= | =divides a number by another= |
| =+= | =adds two numbers together= |
| =-= | =subtracts two numbers= |

* Variable Syntax
| =type= | =name= | === | =value= | ; |
|-------+------|
| =bool= | =var= | = | true | ; |
| =char= | =character= | = | 'c' | ; |
| =int= | =intVar= | = | 2 | ; |
| =double= | =double_var= | = | 2.2647 | ; |

* Variables
- =my_var= now represents the value 2
#+BEGIN_SRC C++ -n
  int main() {
    int my_var = 2;
    cout << my_var + my_var;
    return 0;
  }
#+END_SRC

* Variables
- Variables can have their assigned value changed on the fly
#+BEGIN_SRC C++ -n
  int main() {
    int my_var = 2;
    cout << my_var + my_var;
    my_var = 4;
    cout << my_var + my_var;
    return 0;
  }
#+END_SRC

* Questions??
#+BEGIN_NOTES
Write a couple examples of setting up a primitive already described and then
changing it using only the operators above. like printing numbers 1 - 10 using a var.
DO NOT use strings, ++, --, or anything else not covered already
#+END_NOTES
- Still more to come...
- Let's write some code

* If Statements
- What *IF* I only want to execute code sometimes?

* If Statement Syntax
#+BEGIN_SRC C++ -n
  int main() {
    if (true) {
        // <==== This executes =====
    }
    if (false) {
        // <==== This does *NOT* execute =====
    }
  }
#+END_SRC

* Equivalence operators
| symbol | True Condition | example true | example false
|-------+------|------+------|
| =!= | opposite of current value| !true | !false
| ==== | "equal"| 2 == 2 | 4 == 2
| =!== | *NOT* "equal"| 2 != 4 | 2 != 2
| =>= | the number of the left is larger and not equal to the right| 4 > 2 | 2 > 4
| =<= | the number of the left is smaller and not equal to the right| 2 < 4 | 4 < 2

* If else syntax
#+BEGIN_SRC C++ -n
  int main() {
    if (true) {
        // <==== This executes =====
    } else {
        // <==== This does *NOT* execute =====
    }
    if (false) {
        // <==== This does *NOT* execute =====
    } else {
        // <==== This executes =====
    }
  }
#+END_SRC

* Conditional Practice 1 Question
#+BEGIN_NOTES
1
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 == 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Conditional Practice 2 Question
#+BEGIN_NOTES
2
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 != 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Conditional Practice 3 Question
#+BEGIN_NOTES
2
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 < 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Chaining Conditionals
#+BEGIN_NOTES
Talk about how this is difficult to write at deeper levels
Think 5-6 Conditionals
#+END_NOTES
#+BEGIN_SRC C++ -n
  int main() {
    if (true) {
        // <==== This executes =====
        if (true) {
            // <==== This executes =====
        }
        // <==== This executes =====
    }
    // <==== This executes =====
  }
#+END_SRC

* Logical Operators *AND*
- *&&*
| a | b | a AND b|
|-------+------|------+------|
| True | True | True |
| True | False | False |
| False | True | False |
| False | False | False |

* Logical Operators *OR*
- *||*
| a | b | a OR b|
|-------+------|------+------|
| True | True | True |
| True | False | True |
| False | True | True |
| False | False | False |

* Logical Operators order
- statements will be evaluated from left to right
- no limit to the number you can have
- Statements can be grouped using *()*
    - Just like with math operators *()* are executed first
    - 1 && (2 || 3)
        - 2 || 3 is done first and the result in anded with 1

* Conditional Practice 4 Question
#+BEGIN_NOTES
2
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 < 2 && 2 == 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Conditional Practice 4 Question
#+BEGIN_NOTES
1
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 != 2 || 2 == 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Loops!
- What If I want to do something multiple times

* While Loops Syntax
#+BEGIN_SRC C++ -n
while (condition == true) {
    // do something
}
#+END_SRC

* For Loop Syntax
#+BEGIN_SRC C++ -n
for (initializer; condition; change condition) {
    // do something
}
#+END_SRC

* Math Operators Continued
| syntax | meaning | equivalent |
|-------+------|------+------|
| =var++;= | =increments the variable= | var = var + 1; |
| =var--;= | =decrements the variable= | var = var - 1; |

* Equivalent while and for Loop
#+BEGIN_SRC C++ -n
int while_counter = 10;
while (while_counter > 0) {
    // do something
    while_counter = while_counter - 1;
}
for (int for_counter = 10; for_counter > 0; for_counter++) {
    // do something
}
#+END_SRC

* Questions??
- A go-to place to ask questions ([[https://piazza.com/gatech/fall2017/rjsw/home][Piazza!]])
- Monitored by highly experienced robojackets software members

* Let's write some code
#+BEGIN_NOTES
Write a couple examples of code using what has already been covered.
#+END_NOTES
